// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	entity "commentsService/internal/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CommentRepository is an autogenerated mock type for the CommentRepository type
type CommentRepository struct {
	mock.Mock
}

// Change provides a mock function with given fields: ctx, commentID, text
func (_m *CommentRepository) Change(ctx context.Context, commentID string, text string) error {
	ret := _m.Called(ctx, commentID, text)

	if len(ret) == 0 {
		panic("no return value specified for Change")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, commentID, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, offset, sortFromOld
func (_m *CommentRepository) Get(ctx context.Context, offset string, sortFromOld bool) ([]entity.Comment, error) {
	ret := _m.Called(ctx, offset, sortFromOld)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []entity.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) ([]entity.Comment, error)); ok {
		return rf(ctx, offset, sortFromOld)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) []entity.Comment); ok {
		r0 = rf(ctx, offset, sortFromOld)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, offset, sortFromOld)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, userID, text
func (_m *CommentRepository) Save(ctx context.Context, userID string, text string) error {
	ret := _m.Called(ctx, userID, text)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCommentRepository creates a new instance of CommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentRepository {
	mock := &CommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
